# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D2V3WOUkizzvdjgM3AFRyaRGqIR8u4-2
"""

# Import required libraries
import random
import json
import pickle
import numpy as np
import tensorflow as tf
import nltk
import shutil
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize

from nltk.tokenize import TreebankWordTokenizer
import nltk.tokenize

nltk.tokenize.word_tokenize = TreebankWordTokenizer().tokenize

shutil.rmtree('/root/nltk_data/tokenizers/punkt', ignore_errors=True)
nltk.download('punkt')
nltk.download('wordnet')

# Initialize the lemmatizer
lemmatizer = WordNetLemmatizer()

# Load intents data from the JSON file
intents = json.loads(open('intents.json').read())

# Initialize lists for vocabulary, intent tags, and documents
words = []       # all words across patterns
classes = []     # unique intent tags
documents = []   # (word list, tag) pairs
ignoreLetters = ['?', '!', '.', ',']  # punctuation to ignore

# Process each pattern in the intents JSON
for intent in intents['intents']:
    for pattern in intent['patterns']:
        # Tokenize each pattern sentence into words
        wordList = word_tokenize(pattern)
        words.extend(wordList)  # add words to vocabulary
        documents.append((wordList, intent['tag']))  # save (word list, tag)

        # If the tag is not in class list, add it
        if intent['tag'] not in classes:
            classes.append(intent['tag'])

# Lemmatize, lowercase, and remove punctuation from words
words = [lemmatizer.lemmatize(word.lower()) for word in words if word not in ignoreLetters]

# Remove duplicates and sort
words = sorted(set(words))
classes = sorted(set(classes))

# Save the words and classes to files using pickle
pickle.dump(words, open('words.pkl', 'wb'))
pickle.dump(classes, open('classes.pkl', 'wb'))

# Prepare training data
training = []
outputEmpty = [0] * len(classes)  # Template for one-hot output

# Create bag-of-words representation for each pattern
for document in documents:
    bag = []
    wordPatterns = document[0]

    # Lemmatize each word in the current pattern
    wordPatterns = [lemmatizer.lemmatize(word.lower()) for word in wordPatterns]

    # Build a bag of 1s and 0s for each word in vocabulary
    for word in words:
        bag.append(1) if word in wordPatterns else bag.append(0)

    # Create one-hot encoded output for current intent tag
    outputRow = list(outputEmpty)
    outputRow[classes.index(document[1])] = 1

    # Append the combined input and output to training data
    training.append(bag + outputRow)

# Shuffle the training data randomly
random.shuffle(training)

# Convert training data to a NumPy array
training = np.array(training)

# Split the data into inputs and outputs
trainX = training[:, :len(words)]       # input: bag-of-words
trainY = training[:, len(words):]       # output: one-hot intent

# Define a simple feedforward neural network model
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(128, input_shape=(len(trainX[0]),), activation='relu'))  # input layer
model.add(tf.keras.layers.Dropout(0.5))  # drop 50% neurons to prevent overfitting
model.add(tf.keras.layers.Dense(64, activation='relu'))  # hidden layer
model.add(tf.keras.layers.Dropout(0.5))  # another dropout
model.add(tf.keras.layers.Dense(len(trainY[0]), activation='softmax'))  # output layer for classification

# Configure the model with SGD optimizer and loss function
sgd = tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

# Train the model on the training data
hist = model.fit(np.array(trainX), np.array(trainY), epochs=200, batch_size=5, verbose=1)

# Save the trained model to a file
model.save('chatbot_model.h5', hist)

# Print confirmation
print('Done')

import random
import json
import pickle
import numpy as np
import nltk
from nltk.stem import WordNetLemmatizer
from keras.models import load_model
from nltk.tokenize import TreebankWordTokenizer

# Use Treebank tokenizer to avoid punkt errors
tokenizer = TreebankWordTokenizer()

# Only download what you need
nltk.download('wordnet')

lemmatizer = WordNetLemmatizer()

# Load trained model and data
intents = json.loads(open('intents.json').read())
words = pickle.load(open('words.pkl', 'rb'))
classes = pickle.load(open('classes.pkl', 'rb'))
model = load_model('chatbot_model.h5')


# Tokenize and lemmatize input sentence
def clean_up_sentence(sentence):
    sentence_words = tokenizer.tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    return sentence_words


# Convert input sentence to bag-of-words vector
def bag_of_words(sentence):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(words)
    for w in sentence_words:
        for i, word in enumerate(words):
            if word == w:
                bag[i] = 1
    return np.array(bag)


# Predict the class (intent) of the input sentence
def predict_class(sentence):
    bow = bag_of_words(sentence)
    res = model.predict(np.array([bow]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
    results.sort(key=lambda x: x[1], reverse=True)
    return [{'intent': classes[r[0]], 'probability': str(r[1])} for r in results]


#  random response from the predicted intent
def get_response(intents_list, intents_json):
    if not intents_list:
        return "Sorry, I didn't understand that."
    tag = intents_list[0]['intent']
    for i in intents_json['intents']:
        if i['tag'] == tag:
            return random.choice(i['responses'])


print("Bot is running!")

while True:
    message = input("You: ")
    ints = predict_class(message)
    res = get_response(ints, intents)
    print("Bot:", res)